# Generated by Django 5.0.6 on 2024-08-23 19:00

import django.db.models.deletion
import vehicle.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('franchise', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(blank=True, null=True, validators=[vehicle.models.year_validate], verbose_name='Год выпуска')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Описание')),
                ('long_distance', models.BooleanField(default=False, verbose_name='Междугородние поездки')),
                ('delivery', models.BooleanField(default=False, verbose_name='Доставка')),
                ('ensurance', models.CharField(max_length=30, verbose_name='Страховка')),
                ('drivers_rating', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, verbose_name='Рейтинг арендатора')),
                ('drivers_only_verified', models.BooleanField(default=True, verbose_name='Сдавать только верифицированным пользователям')),
                ('price_delivery', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Стоимость доставки транспорта')),
                ('price_deposit', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='депозит')),
                ('min_rent_day', models.PositiveIntegerField(default=1, verbose_name='Минимальный срок аренды')),
                ('max_rent_day', models.PositiveIntegerField(default=365, verbose_name='Максимальный срок аренды')),
                ('location', models.CharField(max_length=255, verbose_name='Местоположение')),
                ('ratings', models.JSONField(default=vehicle.models.default_rating, verbose_name='Рейтинг транспорта')),
                ('verified', models.BooleanField(default=False, verbose_name='Верифицирован')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
                ('vehicle_park', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vehicles', to='franchise.vehiclepark', verbose_name='Автопарк')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='AutoFeaturesAdditionally',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Дополнительная особенность, Автомобиль',
                'verbose_name_plural': 'Дополнительные особенности, Автомобиль',
            },
        ),
        migrations.CreateModel(
            name='BikeFeaturesAdditionally',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Дополнительная особенность, Мотоцикл',
                'verbose_name_plural': 'Дополнительные особенности, Мотоцикл',
            },
        ),
        migrations.CreateModel(
            name='FeaturesEquipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Оборудование, Судно',
                'verbose_name_plural': 'Оборудование, Судно',
            },
        ),
        migrations.CreateModel(
            name='FeaturesForChildren',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Для детей, Автомобиль',
                'verbose_name_plural': 'Для детей, Автомобиль',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Способ платежа',
                'verbose_name_plural': 'Способы платежей',
            },
        ),
        migrations.CreateModel(
            name='ShipFeaturesAdditionally',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Дополнительная особенность, Судно',
                'verbose_name_plural': 'Дополнительные особенности, Судно',
            },
        ),
        migrations.CreateModel(
            name='VehicleBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('logo', models.ImageField(upload_to='media/images/vehicle/brand_logo')),
            ],
            options={
                'verbose_name': 'Марка',
                'verbose_name_plural': 'Марки',
            },
        ),
        migrations.CreateModel(
            name='VehicleFeaturesFunctions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Функция',
                'verbose_name_plural': 'Функции',
            },
        ),
        migrations.CreateModel(
            name='Helicopter',
            fields=[
                ('vehicle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vehicle.vehicle')),
                ('max_speed', models.IntegerField(blank=True, null=True, verbose_name='Максимальная скорость, км/ч')),
                ('cruising_speed', models.IntegerField(blank=True, null=True, verbose_name='Крейсерская скорость, км/ч')),
                ('flight_range', models.IntegerField(blank=True, null=True, verbose_name='Дальность полета,км')),
                ('flight_duration', models.IntegerField(blank=True, null=True, verbose_name='Длительность полета, ч')),
                ('power_cruising', models.IntegerField(blank=True, null=True, verbose_name='Мощность, крейсерская, л.с.')),
                ('take_off_power', models.IntegerField(blank=True, null=True, verbose_name='Мощность взлетная, л.с.')),
                ('full_take_weight', models.IntegerField(blank=True, null=True, verbose_name='Полный взлетный вес, кг')),
                ('payload', models.IntegerField(verbose_name='Полезная нагрузка, кг')),
                ('engine_capacity', models.IntegerField(blank=True, null=True, verbose_name='Объем двигателя')),
                ('fuel_tank', models.IntegerField(blank=True, null=True, verbose_name='Объем топливного бака, л.')),
                ('acceptable_mileage', models.IntegerField(verbose_name='Допустимый пробег, день')),
                ('vehicle_class', models.CharField(choices=[('premium', 'Премиум'), ('comfort', 'Комфорт'), ('casual', 'Эконом')], max_length=7, verbose_name='Класс')),
            ],
            options={
                'verbose_name': 'Вертолет',
                'verbose_name_plural': 'Вертолеты',
            },
            bases=('vehicle.vehicle',),
        ),
        migrations.CreateModel(
            name='SpecialTechnic',
            fields=[
                ('vehicle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vehicle.vehicle')),
                ('type_technic', models.CharField(blank=True, null=True, verbose_name='Тип техники')),
                ('engine_power', models.IntegerField(blank=True, null=True, verbose_name='Мощность двигателя, л.с.')),
                ('length', models.FloatField(blank=True, null=True, verbose_name='Длина, м')),
                ('width', models.FloatField(blank=True, null=True, verbose_name='Ширина, м')),
                ('high', models.FloatField(blank=True, null=True, verbose_name='Высота, м')),
                ('operating_weight', models.IntegerField(verbose_name='Эксплутационная масса, кг')),
            ],
            options={
                'verbose_name': 'Спец техника',
                'verbose_name_plural': 'Спец техника',
            },
            bases=('vehicle.vehicle',),
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Начало')),
                ('end_date', models.DateField(verbose_name='Конец')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='vehicle.vehicle')),
            ],
            options={
                'verbose_name': 'Дата аренды',
                'verbose_name_plural': 'Даты аренды',
            },
        ),
        migrations.AddField(
            model_name='vehicle',
            name='payment_method',
            field=models.ManyToManyField(related_name='vehicles', to='vehicle.paymentmethod', verbose_name='Способ оплаты'),
        ),
        migrations.AddField(
            model_name='vehicle',
            name='brand',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle', to='vehicle.vehiclebrand', verbose_name='Марка'),
        ),
        migrations.CreateModel(
            name='VehicleDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Вид документа')),
                ('image', models.ImageField(upload_to=vehicle.models.vehicle_documents_upload_to, verbose_name='Фото документа')),
                ('number', models.IntegerField(verbose_name='Номер')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='vehicle.vehicle')),
            ],
            options={
                'verbose_name': 'Документ',
                'verbose_name_plural': 'Документы',
            },
        ),
        migrations.CreateModel(
            name='VehicleModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vehicle.vehiclebrand')),
            ],
            options={
                'verbose_name': 'Модель',
                'verbose_name_plural': 'Модели',
            },
        ),
        migrations.AddField(
            model_name='vehicle',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle', to='vehicle.vehiclemodel', verbose_name='Модель'),
        ),
        migrations.CreateModel(
            name='VehiclePhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to=vehicle.models.vehicle_photo_upload_to, verbose_name='Фото')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='vehicle.vehicle')),
            ],
            options={
                'verbose_name': 'Фото',
                'verbose_name_plural': 'Фото',
            },
        ),
        migrations.CreateModel(
            name='Auto',
            fields=[
                ('vehicle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vehicle.vehicle')),
                ('transmission', models.CharField(choices=[('automatic', 'Автоматическая'), ('robot', 'Робот'), ('variator', 'Вариатор'), ('manual', 'Механическая')], max_length=12, verbose_name='Коробка передач')),
                ('fuel_type', models.CharField(choices=[('electric', 'Электричество'), ('hybrid', 'Гибрид'), ('petrol', 'Бензин'), ('diesel', 'Дизель')], max_length=13, verbose_name='Вид топлива')),
                ('body_type', models.CharField(choices=[('automatic', 'Седан'), ('off-road', 'Внедорожник'), ('universal', 'Универсал'), ('hatchback', 'Хэтчбэк'), ('compartment', 'Купэ'), ('minivan', 'Минивэн'), ('minibus', 'Микроавтобус'), ('liftback', 'Лифтбэк'), ('pickup', 'Пикап'), ('van', 'Фургон'), ('convertible', 'Кабриолет')], max_length=13, verbose_name='Тип кузова')),
                ('acceptable_mileage', models.IntegerField(verbose_name='Допустимый пробег, день')),
                ('seats', models.PositiveIntegerField(default=4, verbose_name='Количество мест')),
                ('vehicle_class', models.CharField(choices=[('business', 'Бизнес'), ('premium', 'Премиум'), ('casual', 'Средний')], max_length=8, verbose_name='Класс')),
                ('drivers_age', models.PositiveIntegerField(blank=True, null=True, verbose_name='Возраст водителя')),
                ('drivers_experience', models.PositiveIntegerField(blank=True, null=True, verbose_name='Стаж водителя')),
                ('features_additionally', models.ManyToManyField(blank=True, related_name='auto', to='vehicle.autofeaturesadditionally', verbose_name='Дополнительно')),
                ('features_for_children', models.ManyToManyField(blank=True, related_name='auto', to='vehicle.featuresforchildren', verbose_name='Для детей')),
                ('features_functions', models.ManyToManyField(blank=True, related_name='auto', to='vehicle.vehiclefeaturesfunctions', verbose_name='Функции')),
            ],
            options={
                'verbose_name': 'Автомобиль',
                'verbose_name_plural': 'Автомобили',
            },
            bases=('vehicle.vehicle',),
        ),
        migrations.CreateModel(
            name='Bike',
            fields=[
                ('vehicle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vehicle.vehicle')),
                ('transmission', models.CharField(choices=[('automatic', 'Автоматическая'), ('manual', 'Механическая')], max_length=12, verbose_name='Коробка передач')),
                ('engine_capacity', models.IntegerField(blank=True, null=True, verbose_name='Объем двигателя')),
                ('seats', models.PositiveIntegerField(default=2, verbose_name='Количество мест')),
                ('vehicle_class', models.CharField(choices=[('premium', 'Премиум'), ('comfort', 'Комфорт'), ('casual', 'Эконом')], max_length=7, verbose_name='Класс')),
                ('acceptable_mileage', models.IntegerField(verbose_name='Допустимый пробег, день')),
                ('drivers_age', models.PositiveIntegerField(blank=True, null=True, verbose_name='Возраст водителя')),
                ('drivers_experience', models.PositiveIntegerField(blank=True, null=True, verbose_name='Стаж водителя')),
                ('features_additionally', models.ManyToManyField(related_name='bike', to='vehicle.bikefeaturesadditionally', verbose_name='Допольнительно')),
                ('features_functions', models.ManyToManyField(related_name='bike', to='vehicle.vehiclefeaturesfunctions', verbose_name='Функции')),
            ],
            options={
                'verbose_name': 'Мотоцикл',
                'verbose_name_plural': 'Мотоциклы',
            },
            bases=('vehicle.vehicle',),
        ),
        migrations.CreateModel(
            name='Ship',
            fields=[
                ('vehicle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vehicle.vehicle')),
                ('type_ship', models.CharField(blank=True, null=True, verbose_name='Тип транспорта')),
                ('grot', models.CharField(blank=True, null=True, verbose_name='Грот')),
                ('length', models.FloatField(blank=True, null=True, verbose_name='Длина, м')),
                ('width', models.FloatField(blank=True, null=True, verbose_name='Ширина, м')),
                ('precipitation', models.FloatField(blank=True, null=True, verbose_name='Осадка, м')),
                ('seats', models.PositiveIntegerField(default=2, verbose_name='Количество мест')),
                ('sleeping_place', models.PositiveIntegerField(blank=True, null=True, verbose_name='Спальных мест')),
                ('one_sleeping_place', models.PositiveIntegerField(blank=True, null=True, verbose_name='1-спальных кают')),
                ('two_sleeping_place', models.PositiveIntegerField(blank=True, null=True, verbose_name='2-спальных кают')),
                ('toilet', models.PositiveIntegerField(blank=True, null=True, verbose_name='Туалетов')),
                ('vehicle_class', models.CharField(choices=[('premium', 'Премиум'), ('comfort', 'Комфорт'), ('casual', 'Эконом')], max_length=7, verbose_name='Класс')),
                ('engine_capacity', models.IntegerField(blank=True, null=True, verbose_name='Объем двигателя')),
                ('water_tank', models.IntegerField(blank=True, null=True, verbose_name='Бак для воды, л')),
                ('fuel_tank', models.IntegerField(blank=True, null=True, verbose_name='Топливный бак, л')),
                ('acceptable_mileage', models.IntegerField(verbose_name='Допустимый пробег, день')),
                ('features_additionally', models.ManyToManyField(related_name='ship', to='vehicle.shipfeaturesadditionally', verbose_name='Допольнительно')),
                ('features_equipment', models.ManyToManyField(related_name='ship', to='vehicle.featuresequipment', verbose_name='Оборудование')),
                ('features_functions', models.ManyToManyField(related_name='ship', to='vehicle.vehiclefeaturesfunctions', verbose_name='Функции')),
            ],
            options={
                'verbose_name': 'Судно',
                'verbose_name_plural': 'Судна',
            },
            bases=('vehicle.vehicle',),
        ),
        migrations.CreateModel(
            name='RatingUpdateLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'content_type', 'object_id')},
            },
        ),
        migrations.CreateModel(
            name='RentPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('day', 'День'), ('week', 'Неделя'), ('month', 'Месяц'), ('year', 'Год')], max_length=5, verbose_name='Период')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Стоимость')),
                ('commission', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Комиссия')),
                ('discount', models.PositiveIntegerField(default=0, verbose_name='Скидка')),
                ('total', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='ИТОГО')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rent_prices', to='vehicle.vehicle')),
            ],
            options={
                'verbose_name': 'Период',
                'verbose_name_plural': 'Стоимость аренды',
                'unique_together': {('vehicle', 'name')},
            },
        ),
    ]
