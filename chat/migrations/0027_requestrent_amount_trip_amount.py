# Generated by Django 5.0.6 on 2025-07-20 12:38

from django.db import migrations, models
from decimal import Decimal
from django.contrib.contenttypes.models import ContentType


def calculate_rent_price_for_migration(rent):
    """Рассчитывает total_cost для аренды в миграции"""
    if not rent.start_date or not rent.end_date:
        return Decimal(0)

    rental_days = (rent.end_date - rent.start_date).days + 1
    if rental_days <= 0:
        return Decimal(0)

    try:
        ct = ContentType.objects.get(id=rent.content_type_id)
        vehicle_model = ct.model_class()
        vehicle = vehicle_model.objects.get(id=rent.object_id)

        RentPrice = None
        try:
            rent_price_ct = ContentType.objects.filter(app_label='vehicle', model='rentprice').first()
            if rent_price_ct:
                RentPrice = rent_price_ct.model_class()
        except:
            pass

        if not RentPrice:
            print(f"[!] Не удалось найти модель RentPrice для rent ID={rent.id}")
            return Decimal(0)

        period_priorities = [
            ('day', 1),
            ('week', 7),
            ('month', 30),
            ('year', 365),
        ]

        rent_price = None
        period_days = 1

        for period, days in period_priorities:
            rent_price_obj = RentPrice.objects.filter(
                content_type=rent.content_type,
                object_id=rent.object_id,
                name=period
            ).first()

            if rent_price_obj:
                rent_price = rent_price_obj
                period_days = days
                break

        if not rent_price:
            print(f"[!] Не найдена цена аренды для rent ID={rent.id}")
            return Decimal(0)

        total_cost = (Decimal(rental_days) / Decimal(period_days)) * Decimal(rent_price.total)

        if rent.delivery and hasattr(vehicle, 'price_delivery'):
            total_cost += Decimal(vehicle.price_delivery or 0)

        print(f"[✓] Rent ID={rent.id} | Days={rental_days} | Period={period_days} | Total={total_cost}")
        return total_cost

    except Exception as e:
        print(f"[!] Ошибка расчета для rent ID={rent.id}: {e}")
        return Decimal(0)


def calculate_amount_from_total_cost(rent, total_cost):
    """Рассчитывает amount (комиссию) от total_cost"""
    try:

        ct = ContentType.objects.get(id=rent.content_type_id)
        vehicle_model = ct.model_class()
        vehicle = vehicle_model.objects.get(id=rent.object_id)

        if hasattr(vehicle, 'owner') and hasattr(vehicle.owner, 'lessor') and hasattr(vehicle.owner.lessor,
                                                                                      'commission'):
            commission = Decimal(vehicle.owner.lessor.commission)
            amount = total_cost / Decimal(100) * commission
        else:
            print(f"[!] Не удалось получить комиссию для rent ID={rent.id}")
            amount = total_cost  # fallback

        if hasattr(rent, 'promocode') and rent.promocode and hasattr(rent.promocode, 'total'):
            discount_amount = amount / Decimal(100) * Decimal(rent.promocode.total)
            amount -= discount_amount

        if hasattr(rent, 'bonus') and rent.bonus:
            amount -= Decimal(rent.bonus)

        return max(amount, Decimal(0))

    except Exception as e:
        print(f"[!] Ошибка расчета amount для rent ID={rent.id}: {e}")
        return total_cost


def populate_amounts(apps, schema_editor):
    RequestRent = apps.get_model('chat', 'RequestRent')
    Trip = apps.get_model('chat', 'Trip')

    print("=== Обновление RequestRent ===")
    for rent in RequestRent.objects.all():
        try:

            if rent.total_cost and rent.total_cost > 0:
                total_cost = Decimal(rent.total_cost)
                print(f"[✓] Используем существующий total_cost={total_cost} для rent ID={rent.id}")
            else:
                total_cost = calculate_rent_price_for_migration(rent)
                rent.total_cost = total_cost
                rent.save(update_fields=['total_cost'])

            amount = calculate_amount_from_total_cost(rent, total_cost)
            rent.amount = amount
            rent.save(update_fields=['amount'])

            print(f"[✓] RequestRent ID={rent.id} updated: total_cost={total_cost}, amount={amount}")

        except Exception as e:
            print(f"[!] Ошибка при обработке RequestRent ID={rent.id}: {e}")

    print("\n=== Обновление Trip ===")
    for trip in Trip.objects.all():
        try:
            rent = RequestRent.objects.filter(
                organizer=trip.organizer,
                content_type=trip.content_type,
                object_id=trip.object_id,
                start_date=trip.start_date,
                end_date=trip.end_date
            ).first()

            if rent and rent.amount:
                trip.amount = rent.amount
                trip.total_cost = rent.total_cost
                trip.save(update_fields=['amount', 'total_cost'])
                print(f"[✓] Trip ID={trip.id} updated from rent: amount={rent.amount}")
            else:
                print(f"[!] Не найдена связанная заявка для Trip ID={trip.id}, пропускаем")

        except Exception as e:
            print(f"[!] Ошибка при обработке Trip ID={trip.id}: {e}")

    print("=== Миграция завершена ===")


def reverse_populate_amounts(apps, schema_editor):
    """Обратная операция - очищаем поля amount"""
    RequestRent = apps.get_model('chat', 'RequestRent')
    Trip = apps.get_model('chat', 'Trip')

    RequestRent.objects.all().update(amount=None)
    Trip.objects.all().update(amount=None)


class Migration(migrations.Migration):
    dependencies = [
        ('chat', '0026_message_language_messagesupport_language'),
    ]

    operations = [
        migrations.AddField(
            model_name='requestrent',
            name='amount',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True,
                                      verbose_name='Сумма к оплате'),
        ),
        migrations.AddField(
            model_name='trip',
            name='amount',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True,
                                      verbose_name='Сумма к оплате'),
        ),
        migrations.RunPython(populate_amounts, reverse_code=reverse_populate_amounts),
    ]
